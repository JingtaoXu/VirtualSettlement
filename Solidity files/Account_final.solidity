////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief      Virtual Settlement
/// \author     Jingtao Xu, Ranga Baminiwatte
/// \supervisor Bolotov Pavel P. [Raiffeisen Bank Russia]
/// \version    0.1.0
/// \date       8.10.2020
/// \copyright  © Bolotov Pavel P.Bolotov Pavel P.
///             © Jingtao Xu 2021.
///             © Ranga Baminiwatte 2021.
///				
////////////////////////////////////////////////////////////////////////////////

pragma solidity ^0.5.0;

//  0x268dc95a4fbfe72e9716a6e74d9d37e77ceefc2a70cb5690ce0489e06e4d844c

contract Account
{
    address    Owner ;
     int256    Balance ;

   bytes32[]  Debug ;

    struct Payment
    {
      bytes32  id ;
      address  account_to ;
      uint256  amount ;
      bytes32  accepted ;
    }

    struct Deal
    {
      mapping (bytes32 => Payment) Payments ;
      bytes32                      Used ;
    }

    mapping (address => Deal) Deals ;

    //unique payment
    //mapping (bytes32 => mapping(bytes32 => Payment)) Paymentss ;
//
// 0x3b172ac722da5efc5df1b7780f39df06fcbbd197ffb779b20f6afd70f1203460
    event  AcceptPayment(bytes32  id, address  deal, address  account_from, address  account_to, uint256  amount) ;
//
// 0xba7bd2f8bbfef8f82a2f1f863e27072637575f396f367694f062961d1d2f99a0
    event  PaymentAccepted(bytes32  id, address  deal) ;
//
// 0x904e7ee166d2ddc185e59d9de47d79bc88edea59a196830ec8c5550b2ccb26ca
    event  PaymentExecuted(bytes32  id, address  deal) ;

//
// 0xd31411e041965e1806fe3922a0e5f9dd0370bc5d256880f4737b68c3c53320cf
    event  IncomeBalance(int256  amount) ;

//
// 0xcddb4dcd5b1cb7407e9c030401b596af7b13492791c96d0bb924787ae095a207
    event  SetBalance(int256  amount) ;

    constructor() public payable
    {
            Owner = msg.sender ;
            Balance = 0 ;
    }

//    function() payable {}

//=============== Self-Description Iface
//
// 0x55d93027
    function SD_Version() public pure returns (bytes32)
    {
       return("RBI 1.0") ;
    }

// 0x0d55e9f5
    function SD_Identify() public pure returns (bytes32)
    {
       return("RBRU.Account.2021-05-18") ;
    }

// 0x3e7bd089
    function SD_Describe() public pure returns (string memory)
    {
       return("Account control") ;
    }
//=============== Debug Iface
//
// 0x

    function GetDebug()  public view returns (bytes32[] memory retVal)
    {
       return(Debug) ;
    }

//=============== Application Iface
//
// 0xf9e50ac9
    function PutPayment(bytes32  id_, address  account_from_, address  account_to_,  uint256  amount_) public
    {
        if( address(this)!=account_from_)  return ; //require(false) ;

            Deals[msg.sender]=Deal({ Used : "Y"} ) ;

            Deals[msg.sender].Payments[id_]=Payment({     id     : id_,
                                                     account_to  : account_to_,
                                                      amount     : amount_,
                                                    accepted     : "N"
                                                   });
        emit AcceptPayment(id_, msg.sender, account_from_, account_to_, amount_) ;

    }

//
// 0x6bd458d0
    function PaymentAccept(address  deal_, bytes32  id_) public
    {
      bool  result ;

       if( msg.sender!=Owner)  require(false) ;

        Deals[deal_].Payments[id_].accepted = "Y" ;

            (result,)=deal_.call.gas(0x300000).value(0)(
                abi.encodeWithSignature("ConfirmPayment(bytes32)", id_)  ) ;
        if(result==false) require(false) ;

      emit  PaymentAccepted(id_, deal_) ;
    }

// 0xf8f8a912
    function GetBalance() public view returns (int256)
    {
        return(Balance) ;
    }

// 0xda763e14
    function GetPayment(address deal_, bytes32  id_)  public view returns (address, uint256, bytes32 retVal)
    {
       return(Deals[deal_].Payments[id_].account_to,
              Deals[deal_].Payments[id_].amount,
              Deals[deal_].Payments[id_].accepted) ;
    }


// 0x4e26002d
    function Income(int256 amount_) public
    {
//      if ( some condition ) require(false) ;

        Balance += int256(amount_) ;

        emit SetBalance(Balance) ;
        emit IncomeBalance(amount_) ;
    }

// execute payment
    function ExecutePayment( bytes32 id_ )  public
    {
        address beneficiaryAcc ;
           bool  result ;

        if (Deals[msg.sender].Payments[id_].accepted != "Y") return ; //require(false) ;

                    beneficiaryAcc=Deals[msg.sender].Payments[id_].account_to ;

          (result,)=beneficiaryAcc.call.gas(0x300000).value(0)(abi.encodeWithSignature("Income(int256)", int256(Deals[msg.sender].Payments[id_].amount))) ;
        if(result==false)  require(false) ;

        Balance -= int256(Deals[msg.sender].Payments[id_].amount) ;

         emit SetBalance(Balance) ;
         emit PaymentExecuted(id_, msg.sender) ;

    }

}
